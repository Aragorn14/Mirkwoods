// Include GCM Service
var gcm       = require('node-gcm-service');
var gcmRef    = {};

// Get the GCM config
var gcmConfig = require(DEFS.DIR.GCM_CONFIG);

// Spakk library
var jsonUtil    = require(DEFS.DIR.JSON_UTIL);
var gcmJsonUtil = new jsonUtil();

var gcmHandle = function() {

  // Create gcm message
  gcmRef.message = new gcm.Message({
    'collapse_key': 'test',
    'data': {
        'key1': 'value1'
    },
    'delay_while_idle': true,
    'time_to_live': 34,
    'dry_run': false
  });

  // Set appropriate api key to instantiate the sender
  gcmRef.sender = new gcm.Sender();

  // Set API Key
  gcmRef.sender.setAPIKey((DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) ? gcmConfig.dev.api_key : gcmConfig.prd.api_key);

  // Setup Endpoint and end path to the latest google GCM endpoint present from Sparkk GCM config
  gcmRef.sender.setGCMEndpoint(gcmConfig.gcm_server.end_point);
  gcmRef.sender.setGCMEndPath(gcmConfig.gcm_server.end_path);

  // Add key value pairs received as a json object
  // input format : { key1 : 'value1', key2 : 'value2', ... }
  this.addJsonObject = function(jsonObject) {
    // Check for jsonObject validity. Convert object to jsonString and pass for validity check
    if(!gcmJsonUtil.toJsonObject(JSON.stringify(jsonObject))) {
      console.log('Provided invalid json object. Please check the gcm payload that you are passing');
      return;
    }

    console.log('Adding jsonObject to gcm message payload : '+jsonObject);
    gcmRef.message.setDataWithObject(jsonObject);
  }

  this.addKeyValue = function(key, value) {
    if(key === null || value === null) return;

    console.log("Trying to add key/value pair to gcm message payload : key = "+key+" value = "+value);
    gcmRef.message.addKeyValue(key, value);
  }

  this.addCollapsekey = function(collapseKey) {
    if(collapseKey === null) return;

    console.log("Adding collapse key "+collapseKey+" to gcm message");
    gcmRef.message.setCollapseKey(collapseKey);
  }

  this.setDryRun = function() {
    console.log("Enabling dryrun in gcm message");
    gcmRef.setDryRun();
  }

  this.setDelayWhileIdle = function() {
    console.log("Setting 'delay while idle' flag to gcm message");
    gcmRef.setDelayWhileIdle(true);
  }

  this.setTimeToLive = function(timeToLive) {
    if(isNaN(parseFloat(timeToLive)) && !isFinite(timeToLive)) return;

    console.log("Setting time to live for this gcm message : "+timeToLive);
    gcmRef.setTimeToLive(timeToLive);
  }

  this.sendMessage = function(registration_ids) {
    console.log(gcmRef.sender);
    console.log('message');
    console.log(gcmRef.message);
    gcmRef.sender.sendMessage(gcmRef.message, registration_ids, true, function(err, data) {
        if (!err) {
            console.log("GCM message was sent successfully");
            console.log("GCM message response data : "+data);
        } else {
            console.log("GCM message sending failed : msg = "+err + data);
        }
    });
  }
}

module.exports = gcmHandle;
