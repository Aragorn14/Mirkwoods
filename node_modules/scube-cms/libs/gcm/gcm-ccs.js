var xmpp = require('node-xmpp');

// Get the GCM config
var gcmConfig = require(DEFS.DIR.GCM_CONFIG);

// Set node-xmpp options
var xmppOptions = {
  type: 'client',
  jid: (DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) ? gcmConfig.dev.project_id : gcmConfig.prd.project_id + '@' + gcmConfig.gcm_server.host_name,
  password: (DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) ? gcmConfig.dev.api_key : gcmConfig.prd.api_key,
  port: 5235,
  host: gcmConfig.gcm_server.host_name,
  legacySSL: true,
  preferredSaslMechanism : 'PLAIN'
};

console.log('Creating XMPP App');
 
var cl = new xmpp.Client(xmppOptions);

console.log(cl);

cl.on('connection', function() {
    console.log('online')
})

cl.on('online', function() {
  console.log("online");
});
 
cl.on('stanza', function(stanza) {
  if (stanza.is('message') &&
      // Best to ignore an error
      stanza.attrs.type !== 'error') {

    console.log("Message received");
    
    //Message format as per here: https://developer.android.com/google/gcm/ccs.html#upstream
    var messageData = JSON.parse(stanza.getChildText("gcm"));

    if (messageData && messageData.message_type != "ack" && messageData.message_type != "nack") {

      var ackMsg = new xmpp.Element('message').c('gcm', { xmlns: 'google:mobile:data' }).t(JSON.stringify({
        "to":messageData.from,
        "message_id": messageData.message_id,
        "message_type":"ack"
      }));
      //send back the ack.
      cl.send(ackMsg);
      console.log("Sent ack");

      //Now do something useful here with the message
      //e.g. awesomefunction(messageData);
      //but let's just log it.
      console.log(messageData);

    } else {
      //Need to do something more here for a nack.
      console.log("message was an ack or nack...discarding");
    }

  } else {
    console.log("error");
    console.log(stanza)
  }
});
 
cl.on('error', function(e) {
  console.log("Error occured:");
  console.error(e);
  console.error(e.children);
});