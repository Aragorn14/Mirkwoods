// Get the GCM config
var gcmConfig = require(DEFS.DIR.GCM_CONFIG);

var gcmPost = function() {

  // Sample GCM Message body
  // var data = {
  //   "collapseKey":"applice",
  //   "delayWhileIdle":true,
  //   "timeToLive":3,
  //   "data":{
  //     "message":"My message","title":"My Title"
  //     },
  //   "registration_ids":["APA91bF40HFSoQ2HX95EkNgGez9_N40Wvdc6OzMgPa9MArS6uSip6cgE_dCKPstRhKfrQsXP0oZmHkK58tWjDFQHtRuEr-YQDoGDv-W2ZJ9PDgGyWqBBNevQMqKqbbsVEag73RUDJxVgcktxa0eowx705Qu_iTVvdw"]
  // };

  // GCM Default Message
  this.message = {
    data : {},
    collapseKey : "none",
    delayWhileIdle : true,
    timeToLive : 300,
    registration_ids : []
  };

  // Add key value pairs received as a json object
  /* input format : 
  {
    sparkk: {
      funcName: IAmYourCustomFunctionDefinedInAndroid
      params: {
        [
          {
            name: loginStatus,
            value: false,
            dataType: boolean
          },
          {
            name: userId,
            value: 10,
            dataType: integer
          },
          {
            name: userName,
            value: sparker,
            dataType: string
          }
        ]    
      }
    }
  } */
  this.addJsonObject = function(gcmMessageJsonString) {
    // Check for jsonObject validity. Convert object to jsonString and pass for validity check
    var parsedJson = jsonUtil.toJsonObject(JSON.stringify(gcmMessageJsonString));
    if(!parsedJson) {
      console.log('Provided invalid json object. Please check the gcm payload that you are passing');
      return false;
    }

    // Default key that android app will be looking for
    var key = "value";

    console.log("Adding jsonObject to gcm message payload : "+parsedJson);
    this.message.data[key] = parsedJson;
    return true;
  }

  this.addKeyValue = function(key, value) {
    if(key === null || value === null) return;

    console.log("Trying to add key/value pair to gcm message payload : key = "+key+" value = "+value);
    this.message.data["'"+key+"'"] = "'"+value+"'";
  }

  this.addCollapseKey = function(collapseKey) {
    if(collapseKey === null) return;

    console.log("Adding collapse key "+collapseKey+" to gcm message");
    this.message.collapseKey = "'"+collapseKey+"'";
  }

  this.setDelayWhileIdle = function() {
    console.log("Setting 'delay while idle' flag to gcm message");
    this.message.delayWhileIdle = true;
  }

  this.setTimeToLive = function(timeToLive) {
    if(isNaN(parseFloat(timeToLive)) && !isFinite(timeToLive)) return;

    console.log("Setting time to live for this gcm message : "+timeToLive);
    this.message.timeToLive = timeToLive;
  }

  this.setRegistrationIds = function(regId) {
    if(regId === "" || typeof regId === "undefined" || !regId) {
      console.log("Registration ID is invalid : "+regId);
      return;
    }

    console.log("Setting registration_ids array = "+regId);
    this.message.registration_ids.push(regId);
  }

  this.sendMessage = function(callback) {
    var messageString =  JSON.stringify(this.message);

    if(DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) {
      console.log("Configuring GCM with Dev Environment");
    } else {
      console.log("Configuring GCM with Prd Environment");
    }

    var headers = {
      'Authorization' : 'key=' + ((DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) ? gcmConfig.dev.api_key : gcmConfig.prd.api_key),
      'Content-Type' : 'application/json',
      'Content-Length' : messageString.length
    };

    // Form the POST request options object
    var options = {
      host: gcmConfig.gcm_server.end_point,
      port: 80,
      path: gcmConfig.gcm_server.end_path,
      method: 'POST',
      headers: headers
    };

    console.log("Sending GCM message with options : ");
    console.log(options);

    console.log("Message Body : ");
    console.log(messageString);

    // Send the POST request to GCM Server
    jsonUtil.postJSON(options, messageString, function(message, statusCode, gcmResponseJsonObject) {
      if(message) {
        console.log("GCM POST response message : "+message);
      }

      if(statusCode === 500) {
        console.log("GCM POST : Failure");
        callback('failure');
        return;
      }

      console.log("GCM POST : Response JSON Object : ");
      console.log(gcmResponseJsonObject);

      callback(gcmResponseJsonObject);
    });
  }
};

module.exports = gcmPost;
