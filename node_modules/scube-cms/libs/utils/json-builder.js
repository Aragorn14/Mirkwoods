// Usage in your .js file
// jsonBuilder   = require(DEFS.DIR.JSON_BUILDER);  // Global Json Library Utility
// jBuilder      = new jsonBuilder();
//
// Notes :
//
// 1. The way DB returns the rows is dependent on the type of data set being returned.
//    -It can be simple data or complex, i.e single or mutiple types of rows and columns.
//    -Based on this type we need to access the rows in a unique way to access the data
//    Since we want to keep this builder generic, we have buildDBDataJSON function. 
//
// 2. For building custom JSON from non DB data anywhere in node we have added 
//    buildJson function. 
//
// 3. For various types of JSON type we have differnt builders
//    _typeSingleArrayMutipleObject, _typeSingleArraySingleObject , 
//    _typeMutipleArraySingleObject, _typeMutipleArrayMultipleObject. 
//
//    

/**
 * @param reqArray: json Builder Options 
 * @param onComplete: callback to pass the results JSON object(s) back
 */
var jsonBuilder = function() {


  this.buildDBDataJSON = function(reqArray, onComplete) {

      switch(reqArray.reqtype) {
        case DEFS.CONST.JSON_TYPE['singleArrayMutipleObj']:
        
          var inData = reqArray.reqData[0];
          var arrName = reqArray.arrayName;

          _typeSingleArrayMutipleObject(inData, arrName, function(retJsonData) {
            SCUBE_LOG.info("JSON Builder UTIL Response");
            onComplete(retJsonData);
            return;
          });
        break;

        default: //Ivalid case

        break;             
      }
  }

  this.buildJson = function(reqArray, onComplete) {

  }

  // Sample format
  // brand is the signle array having muliple objects
  /*     {
          brand: [  
           {
              brand_name: "Nike",
              brand_id: 2,
              scubit_count: 0 
           },
           {
              brand_name: "Addias",
              brand_id: 1,
              scubit_count: 0
            }
          ]
  */
  var _typeSingleArrayMutipleObject = function(rows, arrayName, callback) {

    var jsonData = {};
    var resArray = [];
     
    rows.forEach(function(row) {    // Loop through each row 

      var resObj = {};
      var keys = Object.keys(row);

      keys.forEach(function(key) { // Loop through each column
        var value = row[key];
        resObj['' + key] = value;
      });
      resArray.push(resObj);
    });

    jsonData['' + arrayName] = resArray;
    callback(jsonData);
    return;
  }

  var _typeSingleArraySingleObject = function(rows, arrayName, callback) {

  }

  var _typeMutipleArraySingleObject = function(rows, arrayName, callback) {

  }

  var _typeMutipleArrayMultipleObject= function(rows, arrayName, callback) {
    
  }

  this.buildMongoImageJson = function(reqArray, callback) {

    /* Sample JSON for Insert*/
    /*{
       "_id" : ObjectId("55c665b70e7e744618b54db9"),
       "brand_id" : "1",
       "brand_name" : "hello",
       "public_id" : "11234",
       "images" : [ 
           {
               "image_type" : "logo",
               "image_resolution" : {
                   "ldpi" : "www",
                   "mdpi" : "www",
                   "hdpi" : "www"
               }
           }
       ]
    }*/

    var jsonData = {};
    var imageResObj = {};
    var images = [];
    var imagesObj = {};
    var keys = Object.keys(reqArray);
    keys.forEach(function(key) { // Loop through each key
      var value = reqArray[key];
      if(key === 'ldpi' || key === 'mdpi' || key === 'hdpi') {
        imageResObj['' + key] = value;
      } else if(key === 'image_type') {
        imagesObj['' + key] = value;
      } else if(key === 'image_type_id') {
        imagesObj['' + key] = value;
      } else {
        jsonData['' + key] = value;
      }
    });
    imagesObj['image_resolution'] = imageResObj;
    images.push(imagesObj);
    jsonData['images'] = imagesObj;
    callback(jsonData);
    return;
  }
}

module.exports = jsonBuilder;
